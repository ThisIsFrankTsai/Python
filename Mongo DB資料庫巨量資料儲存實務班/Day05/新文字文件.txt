1.add
test> db.school.insertMany([
      {c:'teacher'},
      {c:'student'}
  ])

2.關掉平衡器
test> sh.disableBalancing('test.school')

3.建立索引
test> db.school.createIndex({'c':1,'_id':'hashed'})

4.設立片鍵
test> sh.shardCollection(
     'test.school',
     {'c':1,'_id':'hashed'}
 )

5.建立區域
test> sh.addShardToZone('rs0','TEACHER')
test> sh.addShardToZone('rs1','STUDENT')

6.決定哪些資料要到哪個區域
test> sh.updateZoneKeyRange(
       'test.school',
	{'c':'teacher','_id':MinKey()},
        {'c':'teacher','_id':MaxKey()},
        'TEACHER'
)


test> sh.updateZoneKeyRange(
       'test.school',
	{'c':'student','_id':MinKey()},
        {'c':'student','_id':MaxKey()},
        'STUDENT'
)

7.開平衡器
test> sh.enableBalancing('test.school')

test> sh.status()
 chunks: [
          { min: { c: MinKey(), _id: MinKey() }, max: { c: 'student', _id: MinKey() }, 'on shard': 'rs1', 'last modified': Timestamp({ t: 2, i: 2 }) }, #空chunk
          { min: { c: 'student', _id: MinKey() }, max: { c: 'student', _id: MaxKey() }, 'on shard': 'rs1', 'last modified': Timestamp({ t: 2, i: 3 }) },#student
          { min: { c: 'student', _id: MaxKey() }, max: { c: 'teacher', _id: MinKey() }, 'on shard': 'rs1', 'last modified': Timestamp({ t: 2, i: 4 }) },#teacher
          { min: { c: 'teacher', _id: MinKey() }, max: { c: 'teacher', _id: MaxKey() }, 'on shard': 'rs0', 'last modified': Timestamp({ t: 2, i: 0 }) },#空chunk
          { min: { c: 'teacher', _id: MaxKey() }, max: { c: MaxKey(), _id: MaxKey() }, 'on shard': 'rs1', 'last modified': Timestamp({ t: 1, i: 3 }) }
        ],0


8.新增、查詢
test> db.shcool.insertOne({'name':'Tom','c':'teacher'})
mongosh --port 20000
test> db.school.find()
[ { _id: ObjectId("62f75ccf2b67985a7b4a8ee4"), c: 'teacher' } ]

